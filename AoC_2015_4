import java.math.BigInteger
import java.security.MessageDigest

/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */
fun main(args: Array<String>) {
    println("Ex 4, Fase 1")
	
    var number = 0
    
    while (true){
        val hash = hashMD5(args[0] + number)
        if (hash.subSequence(0, 4).equals("00000")){
            println("hash: " + hash + " number: " + number)
            break
        }
        number++
    }
}

fun hashMD5(string: String): String{
    val md5 = MessageDigest.getInstance("MD5").digest(string.toByteArray())
    return BigInteger(1, md5).toString(16)
}


/* Java Solution from:
 * https://old.reddit.com/r/adventofcode/comments/3vdn8a/day_4_solutions/cxmmppp/
 */

/* 
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.io.UnsupportedEncodingException;

public class Advent4 {
    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        int i = 0;
        byte[] array;
        while(true) {
            array = md.digest("bgvyzdsv".concat(Integer.toString(i++)).getBytes()); // Put input here
            if(array[0] == 0 && array[1] == 0 && (array[2]>> 4 & 0xf) == 0) {
                if(array[2] == 0) // Comment out to do part 1.
                    break;
            }
        }
        System.out.println("Lowest value needed: " + (i-1));
    }
} 
*/

